import requests
from web3.main import to_checksum_address

# https://docs.odos.xyz/api/endpoints/
QUOTE_URL = "https://api.odos.xyz/sor/quote/v2"
ASSEMBLE_URL = "https://api.odos.xyz/sor/assemble"


def get_quote(chain_id, caller, input_token, output_token, amount_in, max_slippage=0.003):
    """
    Args:
        chain_id: Chain ID of the network where the swap is to be performed. Given as an integer.
        caller: Address that will call the Odos router to perform the swap.
        input_token: Address of the token that the caller will provide for the swap.
        output_token: Address of the token that the caller will receive from the swap.
        amount_in: Amount of input_token being swapped, as an integer with the same precision
            used in the token smart contract
        max_slippage: Maximum allowable slippage in the router swap, denoted as a fraction.

    Returns:
        int: Estimated amount of output_token received, as an integer with the same precision used
             in the token smart contract.
        str: Odos path ID used to generate the route calldata
    """
    quote_request_body = {
        "chainId": int(chain_id),
        "inputTokens": [
            {"tokenAddress": to_checksum_address(str(input_token)), "amount": str(amount_in)}
        ],
        "outputTokens": [{"tokenAddress": to_checksum_address(str(output_token)), "proportion": 1}],
        "slippageLimitPercent": max_slippage * 100,
        "userAddr": to_checksum_address(str(caller)),
        "referralCode": 0,
        "disableRFQs": True,
        "compact": True,
    }

    response = requests.post(
        QUOTE_URL,
        headers={"Content-Type": "application/json"},
        json=quote_request_body,
    )

    if response.status_code != 200:
        raise ValueError(f"{response.status_code} error during quote: {response.json()}")

    quote = response.json()

    return int(quote["outAmounts"][0]), quote["pathId"]


def get_route_calldata(caller, path_id):
    """
    Args:
        caller: Address that will call the Odos router to perform the swap.
        path_id: Odos path ID for the desired swao. Generated by `get_quote`.

    Returns:
        string: `routingData` for use in `OdosZap` contracts
    """
    assemble_request_body = {
        "userAddr": to_checksum_address(str(caller)),
        "pathId": path_id,
        "simulate": False,
    }

    response = requests.post(
        ASSEMBLE_URL,
        headers={"Content-Type": "application/json"},
        json=assemble_request_body,
    )

    if response.status_code != 200:
        raise ValueError(f"{response.status_code} error during assembly: {response.json()}")

    data = response.json()

    return data["transaction"]["data"]
